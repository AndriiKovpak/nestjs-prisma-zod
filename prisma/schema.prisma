// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

// generator zod {
//   provider              = "nestjs-zod-prisma"
//   output                = "../src/types/zod"
//   relationModel         = true
//   generateDTO           = true
//   modelCase             = "PascalCase"
//   modelSuffix           = "Model"
//   dtoCase               = "PascalCase"
//   dtoSuffix             = "Dto"
//   useDecimalJs          = true
//   prismaJsonNullability = true
// }

generator types {
  provider                        = "prisma-types-generator"
  output                          = "../src/types/generated"
  outputToNestJsResourceStructure = true
  flatResourceStructure           = true
  exportRelationModifierClasses   = true
  reExport                        = true
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = "Entity"
  classValidation                 = false
  fileNamingStyle                 = "pascal"
  noDependencies                  = false
  excludeEntity                   = false
  excludePlainDto                 = false
  excludeCreateDto                = false
  excludeUpdateDto                = false
  excludeConnectDto               = false
  definiteAssignmentAssertion     = false
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "../generated/dbml"
}

model User {
  id         String      @id @default(cuid())
  status     UserStatus  @default(Pending)
  role       Role        @relation(fields: [roleId], references: [id])
  roleId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  deletedAt  DateTime?
  properties Property[]
  email      Email?
  orders     UserOrder[]
}

model Role {
  id          String   @id @default(cuid())
  ord         Int      @unique
  name        String   @unique
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  users       User[]
}

model PropertyCategory {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  dataType              DataType               @default(String)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now()) @updatedAt
  properties            Property[]
  userPropertyComputeds UserPropertyComputed[]
}

model Property {
  id                 String           @id @default(cuid())
  name               String           @unique
  propertyCategory   PropertyCategory @relation(fields: [propertyCategoryId], references: [id])
  propertyCategoryId String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now()) @updatedAt
  users              User[]
  products           Product[]
  shops              Shop[]
}

model UserPropertyComputed {
  id                 String           @id @default(cuid())
  ord                Int              @unique
  isUnique           Boolean          @default(false)
  propertyCategory   PropertyCategory @relation(fields: [propertyCategoryId], references: [id])
  propertyCategoryId String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now()) @updatedAt
}

model Email {
  user              User           @relation(fields: [userId], references: [id])
  userId            String         @unique
  email             String         @unique
  verificationToken String?
  isVerified        Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now()) @updatedAt
  emailPassword     EmailPassword?
}

model EmailPassword {
  email        String   @unique
  emailModel   Email    @relation(fields: [email], references: [email])
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model UserOrder {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  amount    Float       @db.Double
  fee       Float       @db.Double
  discount  Float       @db.Double
  total     Float       @db.Double
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  items     OrderItem[]
}

model OrderItem {
  id          String    @id @default(cuid())
  orderId     String
  order       UserOrder @relation(fields: [userOrderId], references: [id])
  itemsCount  Int       @default(1)
  price       Float     @db.Double
  itemsAmount Float     @db.Double
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  userOrderId String
}

model ProductCategory {
  id        String            @id @default(cuid())
  fullIds   Json
  parentId  String?
  ord       Int               @default(1)
  parent    ProductCategory?  @relation(name: "tree", fields: [parentId], references: [id])
  children  ProductCategory[] @relation(name: "tree")
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt
  products  Product[]

  @@unique([parentId, ord])
}

model Product {
  id         String           @id @default(cuid())
  categoryId String?
  category   ProductCategory? @relation(fields: [categoryId], references: [id])
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now()) @updatedAt
  properties Property[]
  shops      Shop[]
  videoId    String?
  pictures   Picture[]
  video      Video?           @relation(fields: [videoId], references: [id])
}

model Shop {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  properties Property[]
  products   Product[]
  videoId    String?
  video      Video?     @relation(fields: [videoId], references: [id])
  pictures   Picture[]
}

model Picture {
  id        String    @id @default(cuid())
  location  String
  ord       Int       @default(1)
  size      Int?
  width     Int?
  height    Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  products  Product[]
  shops     Shop[]
}

model Video {
  id        String    @id @default(cuid())
  location  String
  size      Int?
  duration  Int?
  width     Int?
  height    Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  products  Product[]
  shops     Shop[]
}

enum UserStatus {
  Pending
  Activated
  Blacklisted
  Deleted
}

enum DataType {
  String
  Number
  Boolean
  DateTime
}
